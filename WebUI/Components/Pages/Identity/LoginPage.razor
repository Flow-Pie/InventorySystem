@page "/account/login"
@using Application.DTO.Request.Identity
<EditForm Model="LoginModel" method="post" OnValidSubmit="LoginAsync" FormName="login" Enhance>
    <div class="card border-primary shadow-lg text-dark p-4 mt-5 mb-3 mx-auto" style="border-radius: 24px; max-width: 400px;">
        <div class="card-header text-dark fs-4 border-primary text-center">Login</div>
        <div class="card-body">
            <DataAnnotationsValidator />
            
            <!-- Email Input -->
            <div class="form-floating mb-3">
                <InputText @bind-Value="LoginModel.Email" class="form-control" id="Email" autocomplete="username" placeholder="Email" />
                <label for="Email" class="form-label">Email Address</label>
            </div>

            <!-- Password Input -->
            <div class="form-floating mb-3">
                <InputText @bind-Value="LoginModel.Password" type="password" class="form-control" id="Password" placeholder="Password" />
                <label for="Password" class="form-label">Password</label>
            </div>

            <!-- Login Button -->
            <div class="form-group text-center">
                <button type="submit" class="btn btn-primary mt-3 w-100">Login</button>
            </div>

            <hr class="text-primary my-4" />
        </div>

        <!-- Error Message or Validation Summary -->
        <div class="card-footer text-center">
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @ErrorMessage
                </div>
            }
            else
            {
                <ValidationSummary class="text-danger" />
            }
        </div>
    </div>
</EditForm>
@code {
    string ErrorMessage = "";
    public bool IsBusy {get; set;} =false;
    [SupplyParameterFromForm] 
    private LoginUserRequestDTO LoginModel { get; set; } = new();
    private async Task LoginAsync()
    {
        if(IsBusy) return;
        ErrorMessage = "";
        IsBusy = true;
        var response = await accountService.LoginAsync(LoginModel);
        if(!response.Flag)
        {
            IsBusy = false;
            ErrorMessage = response.Message;
            return;
        }
        IsBusy = false;
        NavManager.NavigateTo(uri: "app/home", true);
    }
    [CascadingParameter] 
    public Task<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>? ClientAuthState { get; set; }
    protected override async Task OnInitializedAsync()
    {
        try{
            var authState = await ClientAuthState!;
            if(authState.User.Identity!.IsAuthenticated)
            {
                NavManager.NavigateTo(uri: "app/home", false,true);
            }
        }catch(Exception ex){
            Console.WriteLine(ex.Message);
        }
    }

}